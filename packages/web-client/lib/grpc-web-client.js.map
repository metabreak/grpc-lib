{"version":3,"file":"grpc-web-client.js","sourceRoot":"","sources":["../src/grpc-web-client.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GrpcClient,\n  GrpcClientFactory,\n  GrpcDataEvent,\n  GrpcEvent,\n  GrpcMessage,\n  GrpcMessageClass,\n  GrpcMetadata,\n  GrpcStatusEvent,\n} from '@metabreak/grpc-common';\nimport { GrpcWebClientBase, MethodDescriptor } from 'grpc-web';\nimport { Observable } from 'rxjs';\n\n/**\n * Settings for the chosen implementation of GrpcClient\n */\nexport interface GrpcWebClientSettings {\n  host: string;\n  format?: string;\n  suppressCorsPreflight?: boolean;\n  withCredentials?: boolean;\n}\n\n/**\n * GrpcClientFactory implementation based on grpc-web\n */\n\nexport class GrpcWebClientFactory\n  implements GrpcClientFactory<GrpcWebClientSettings>\n{\n  constructor(private defaultSettings: GrpcWebClientSettings) {}\n\n  createClient(serviceId: string, customSettings: GrpcWebClientSettings) {\n    const settings = customSettings || this.defaultSettings;\n\n    if (!settings) {\n      throw new Error(\n        `grpc-web client factory: no settings provided for ${serviceId}`,\n      );\n    }\n\n    return new GrpcWebClient({ ...settings });\n  }\n}\n\n/**\n * GrpcClient implementation based on grpc-web\n */\nexport class GrpcWebClient implements GrpcClient<GrpcWebClientSettings> {\n  private client: GrpcWebClientBase;\n\n  constructor(private settings: GrpcWebClientSettings) {\n    this.client = new GrpcWebClientBase(this.settings);\n  }\n\n  getSettings(): GrpcWebClientSettings {\n    return { ...this.settings };\n  }\n\n  unary<Q extends GrpcMessage, S extends GrpcMessage>(\n    path: string,\n    req: Q,\n    metadata: GrpcMetadata,\n    reqclss: GrpcMessageClass<Q>,\n    resclss: GrpcMessageClass<S>,\n  ): Observable<GrpcEvent<S>> {\n    const descriptor = new MethodDescriptor(\n      path,\n      'unary',\n      reqclss,\n      resclss,\n      (request: Q) => request.serializeBinary(),\n      resclss.deserializeBinary,\n    );\n\n    return new Observable((obs) => {\n      const stream = this.client.rpcCall(\n        this.settings.host + path,\n        req,\n        metadata?.toObject() ?? {},\n        descriptor,\n        (error, data) => {\n          if (error) {\n            obs.next(\n              new GrpcStatusEvent(\n                error.code,\n                error.message,\n                new GrpcMetadata((error as any).metadata),\n              ),\n            );\n            obs.complete();\n          } else {\n            obs.next(new GrpcDataEvent(data as any));\n          }\n        },\n      );\n\n      // take only status 0 because unary error already includes non-zero statuses\n      stream.on('status', (status) =>\n        status.code === 0\n          ? obs.next(\n              new GrpcStatusEvent(\n                status.code,\n                status.details,\n                new GrpcMetadata(status.metadata),\n              ),\n            )\n          : null,\n      );\n      stream.on('end', () => obs.complete());\n\n      return () => stream.cancel();\n    });\n  }\n\n  serverStream<Q extends GrpcMessage, S extends GrpcMessage>(\n    path: string,\n    req: Q,\n    metadata: GrpcMetadata,\n    reqclss: GrpcMessageClass<Q>,\n    resclss: GrpcMessageClass<S>,\n  ): Observable<GrpcEvent<S>> {\n    const descriptor = new MethodDescriptor(\n      path,\n      'server_streaming',\n      reqclss,\n      resclss,\n      (request: Q) => request.serializeBinary(),\n      resclss.deserializeBinary,\n    );\n\n    return new Observable((obs) => {\n      const stream = this.client.serverStreaming(\n        this.settings.host + path,\n        req,\n        metadata?.toObject() ?? {},\n        descriptor,\n      );\n\n      stream.on('status', (status) =>\n        obs.next(\n          new GrpcStatusEvent(\n            status.code,\n            status.details,\n            new GrpcMetadata(status.metadata),\n          ),\n        ),\n      );\n      stream.on('error', (error) => {\n        obs.next(\n          new GrpcStatusEvent(\n            error.code,\n            error.message,\n            new GrpcMetadata((error as any).metadata),\n          ),\n        );\n        obs.complete();\n      });\n      stream.on('data', (data) => obs.next(new GrpcDataEvent(data as any)));\n      stream.on('end', () => obs.complete());\n\n      return () => stream.cancel();\n    });\n  }\n}\n"]}