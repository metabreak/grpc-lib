{"version":3,"file":"grpc-worker-client.js","sourceRoot":"","sources":["../src/grpc-worker-client.ts"],"names":[],"mappings":";;;AAAA,sEAQuC;AAEvC,8CAAqC;AAgBrC,MAAa,uBAAuB;IAIxB;IACA;IAFV,YACU,eAAyC,EACzC,OAA0B;QAD1B,oBAAe,GAAf,eAAe,CAA0B;QACzC,YAAO,GAAP,OAAO,CAAmB;IACjC,CAAC;IAEJ,YAAY,CAAC,SAAiB,EAAE,cAAwC;QACtE,MAAM,QAAQ,GAAG,cAAc,IAAI,IAAI,CAAC,eAAe,CAAC;QAExD,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CACb,mDAAmD,SAAS,EAAE,CAC/D,CAAC;SACH;QAED,OAAO,IAAI,gBAAgB,CAAC,SAAS,EAAE,EAAE,GAAG,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACxE,CAAC;CACF;AAnBD,0DAmBC;AAKD,MAAa,gBAAgB;IAEjB;IACA;IACA;IAHV,YACU,SAAiB,EACjB,QAAkC,EAClC,OAA0B;QAF1B,cAAS,GAAT,SAAS,CAAQ;QACjB,aAAQ,GAAR,QAAQ,CAA0B;QAClC,YAAO,GAAP,OAAO,CAAmB;QAElC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrE,CAAC;IAED,WAAW;QACT,OAAO,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAED,KAAK,CACH,IAAY,EACZ,GAAM,EACN,QAAsB,EACtB,OAA4B,EAC5B,OAA4B;QAE5B,OAAO,IAAI,CAAC,OAAO;aAChB,mBAAmB,CAClB,IAAI,CAAC,SAAS,EACd,IAAI,EACJ,GAAG,CAAC,QAAQ,EAAE,EACd,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,CAC3B;aACA,IAAI,CACH,eAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,IAAI,GAAG,YAAY,kCAAa,EAAE;gBAChC,GAAG,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,IAAW,CAAC,CAAC;aACzC;QACH,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IAED,YAAY,CACV,IAAY,EACZ,GAAM,EACN,QAAsB,EACtB,OAA4B,EAC5B,OAA4B;QAE5B,OAAO,IAAI,CAAC,OAAO;aAChB,0BAA0B,CACzB,IAAI,CAAC,SAAS,EACd,IAAI,EACJ,GAAG,CAAC,QAAQ,EAAE,EACd,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,CAC3B;aACA,IAAI,CACH,eAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,IAAI,GAAG,YAAY,kCAAa,EAAE;gBAChC,GAAG,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,IAAW,CAAC,CAAC;aACzC;QACH,CAAC,CAAC,CACH,CAAC;IACN,CAAC;CACF;AA1DD,4CA0DC","sourcesContent":["import {\n  GrpcClient,\n  GrpcClientFactory,\n  GrpcDataEvent,\n  GrpcEvent,\n  GrpcMessage,\n  GrpcMessageClass,\n  GrpcMetadata,\n} from '@metabreak/grpc-worker-common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { GrpcWorkerGateway } from './grpc-worker-gateway';\n\n/**\n * Settings for the chosen implementation of GrpcClient\n */\nexport interface GrpcWorkerClientSettings {\n  host: string;\n  format?: string;\n  suppressCorsPreflight?: boolean;\n  withCredentials?: boolean;\n}\n\n/**\n * GrpcClientFactory implementation based on grpc-web running in worker\n */\nexport class GrpcWorkerClientFactory\n  implements GrpcClientFactory<GrpcWorkerClientSettings>\n{\n  constructor(\n    private defaultSettings: GrpcWorkerClientSettings,\n    private gateway: GrpcWorkerGateway,\n  ) {}\n\n  createClient(serviceId: string, customSettings: GrpcWorkerClientSettings) {\n    const settings = customSettings || this.defaultSettings;\n\n    if (!settings) {\n      throw new Error(\n        `Worker client factory: no settings provided for ${serviceId}`,\n      );\n    }\n\n    return new GrpcWorkerClient(serviceId, { ...settings }, this.gateway);\n  }\n}\n\n/**\n * GrpcClient implementation based on grpc-web running in worker\n */\nexport class GrpcWorkerClient implements GrpcClient<GrpcWorkerClientSettings> {\n  constructor(\n    private serviceId: string,\n    private settings: GrpcWorkerClientSettings,\n    private gateway: GrpcWorkerGateway,\n  ) {\n    this.gateway.configureServiceClient(this.serviceId, this.settings);\n  }\n\n  getSettings(): GrpcWorkerClientSettings {\n    return { ...this.settings };\n  }\n\n  unary<Q extends GrpcMessage, S extends GrpcMessage>(\n    path: string,\n    req: Q,\n    metadata: GrpcMetadata,\n    reqclss: GrpcMessageClass<Q>,\n    resclss: GrpcMessageClass<S>,\n  ): Observable<GrpcEvent<S>> {\n    return this.gateway\n      .callUnaryFromWorker<Q, S>(\n        this.serviceId,\n        path,\n        req.toObject(),\n        metadata?.toObject() ?? {},\n      )\n      .pipe(\n        tap((res) => {\n          if (res instanceof GrpcDataEvent) {\n            res.data = new resclss(res.data as any);\n          }\n        }),\n      );\n  }\n\n  serverStream<Q extends GrpcMessage, S extends GrpcMessage>(\n    path: string,\n    req: Q,\n    metadata: GrpcMetadata,\n    reqclss: GrpcMessageClass<Q>,\n    resclss: GrpcMessageClass<S>,\n  ): Observable<GrpcEvent<S>> {\n    return this.gateway\n      .callServerStreamFromWorker<Q, S>(\n        this.serviceId,\n        path,\n        req.toObject(),\n        metadata?.toObject() ?? {},\n      )\n      .pipe(\n        tap((res) => {\n          if (res instanceof GrpcDataEvent) {\n            res.data = new resclss(res.data as any);\n          }\n        }),\n      );\n  }\n}\n"]}