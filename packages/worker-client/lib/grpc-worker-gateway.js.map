{"version":3,"file":"grpc-worker-gateway.js","sourceRoot":"","sources":["../src/grpc-worker-gateway.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GrpcDataEvent,\n  GrpcEvent,\n  GrpcMessage,\n  GrpcMetadata,\n  GrpcStatusEvent,\n} from '@metabreak/grpc-worker-common';\nimport { GrpcWorkerApi } from '@metabreak/grpc-worker';\nimport { Metadata } from 'grpc-web';\nimport { Observable, Observer } from 'rxjs';\nimport { GrpcWorkerClientSettings } from './grpc-worker-client';\n\nexport class GrpcWorkerGateway {\n  private lastId = 0;\n\n  private connections = new Map<number, Observer<any>>();\n\n  constructor(private worker: Worker) {\n    worker.onmessage = (event: MessageEvent) => {\n      const data =\n        event.data as GrpcWorkerApi.GrpcWorkerMessageRPCResponse<any>;\n      const connection = this.connections.get(data.id);\n\n      if (\n        connection &&\n        data.type === GrpcWorkerApi.GrpcWorkerMessageType.rpcResponse\n      ) {\n        switch (data.responseType) {\n          case GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.error:\n            connection.next(\n              new GrpcStatusEvent(\n                data.error.code,\n                data.error.message,\n                (data.error as any).metadata,\n              ),\n            );\n            connection.complete();\n            this.connections.delete(data.id);\n            break;\n          case GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.status:\n            connection.next(\n              new GrpcStatusEvent(\n                data.status.code,\n                data.status.details,\n                new GrpcMetadata(data.status.metadata),\n              ),\n            );\n            break;\n          case GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.data:\n            connection.next(new GrpcDataEvent(data.response));\n            break;\n          case GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.end:\n            connection.complete();\n            this.connections.delete(data.id);\n            break;\n        }\n      }\n    };\n  }\n\n  configureServiceClient(\n    serviceId: string,\n    settings: GrpcWorkerClientSettings,\n  ) {\n    this.worker.postMessage({\n      type: GrpcWorkerApi.GrpcWorkerMessageType.serviceClientConfig,\n      serviceId,\n      settings,\n    } as GrpcWorkerApi.GrpcWorkerMessageServiceClientConfig);\n  }\n\n  callUnaryFromWorker<Q extends GrpcMessage, S extends GrpcMessage>(\n    serviceId: string,\n    path: string,\n    request: Q,\n    metadata: Metadata,\n  ): Observable<GrpcEvent<S>> {\n    return new Observable((observer) => {\n      const id = this.createRequestId();\n\n      this.connections.set(id, observer);\n\n      this.worker.postMessage({\n        type: GrpcWorkerApi.GrpcWorkerMessageType.rpcRequest,\n        id,\n        serviceId,\n        path,\n        request,\n        metadata,\n      } as GrpcWorkerApi.GrpcWorkerMessageRPCRequest<Q>);\n\n      return () => this.closeConnection(id);\n    });\n  }\n\n  callServerStreamFromWorker<Q extends GrpcMessage, S extends GrpcMessage>(\n    serviceId: string,\n    path: string,\n    request: Q,\n    metadata: Metadata,\n  ): Observable<GrpcEvent<S>> {\n    return new Observable((observer) => {\n      const id = this.createRequestId();\n\n      this.connections.set(id, observer);\n\n      this.worker.postMessage({\n        type: GrpcWorkerApi.GrpcWorkerMessageType.rpcRequest,\n        id,\n        serviceId,\n        path,\n        request,\n        metadata,\n      } as GrpcWorkerApi.GrpcWorkerMessageRPCRequest<Q>);\n\n      return () => this.closeConnection(id);\n    });\n  }\n\n  closeConnection(id: number) {\n    this.worker.postMessage({\n      type: GrpcWorkerApi.GrpcWorkerMessageType.rpcCancel,\n      id,\n    } as GrpcWorkerApi.GrpcWorkerMessageRPCCancel);\n\n    this.connections.delete(id);\n  }\n\n  private createRequestId() {\n    return this.lastId++;\n  }\n}\n"]}