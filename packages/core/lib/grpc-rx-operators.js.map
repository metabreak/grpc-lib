{"version":3,"file":"grpc-rx-operators.js","sourceRoot":"","sources":["../src/grpc-rx-operators.ts"],"names":[],"mappings":";;;AAAA,sEAKuC;AACvC,+BAAkD;AAClD,8CAAwD;AAOxD,SAAgB,iBAAiB;IAC/B,OAAO,CAAC,OAAiC,EAAE,EAAE,CAC3C,OAAO,CAAC,IAAI,CACV,qBAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAClB,KAAK,YAAY,oCAAe,IAAI,KAAK,CAAC,UAAU;QAClD,CAAC,CAAC,iBAAU,CAAC,KAAK,CAAC;QACnB,CAAC,CAAC,SAAE,CAAC,KAAK,CAAC,CACd,CACF,CAAC;AACN,CAAC;AATD,8CASC;AAOD,SAAgB,YAAY;IAC1B,OAAO,CAAC,OAAiC,EAAE,EAAE,CAC3C,OAAO,CAAC,IAAI,CACV,kBAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,YAAY,kCAAa,CAAC,EACjD,eAAG,CAAC,CAAC,KAAuB,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAC7C,CAAC;AACN,CAAC;AAND,oCAMC","sourcesContent":["import {\n  GrpcDataEvent,\n  GrpcEvent,\n  GrpcMessage,\n  GrpcStatusEvent,\n} from '@metabreak/grpc-worker-common';\nimport { Observable, of, throwError } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n/**\n * RxJS operator\n * When applied to gRPC events emits error for status events with a non-zero code (includes throwStatusErrors)\n * @return Observable of gRPC events\n */\nexport function throwStatusErrors<T extends GrpcMessage>() {\n  return (source$: Observable<GrpcEvent<T>>) =>\n    source$.pipe(\n      switchMap((event) =>\n        event instanceof GrpcStatusEvent && event.statusCode\n          ? throwError(event)\n          : of(event),\n      ),\n    );\n}\n\n/**\n * RxJS operator\n * When applied to gRPC events stream extracts and returns only messages\n * @return Observable of messages\n */\nexport function takeMessages<T extends GrpcMessage>() {\n  return (source$: Observable<GrpcEvent<T>>) =>\n    source$.pipe(\n      filter((event) => event instanceof GrpcDataEvent),\n      map((event: GrpcDataEvent<T>) => event.data),\n    );\n}\n"]}