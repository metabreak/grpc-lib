{"version":3,"file":"grpc-logger-interceptor.js","sourceRoot":"","sources":["../src/grpc-logger-interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GrpcDataEvent,\n  GrpcEvent,\n  GrpcMessage,\n  GrpcRequest,\n} from '@metabreak/grpc-worker-common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { GrpcHandler } from './grpc-handler';\nimport { GrpcInterceptor } from './grpc-interceptor';\n\n/**\n * A configuration definition for GrpcLoggerInterceptor\n */\nexport interface GrpcLoggerSettings {\n  /**\n   * Enables / disables the output, default true\n   */\n  enabled?: boolean;\n  /**\n   * Includes client settings into the logs, default true\n   */\n  logClientSettings?: boolean;\n  /**\n   * Includes request metadata into the logs, default true\n   */\n  logMetadata?: boolean;\n  /**\n   * Logs events with status code OK (0), default false\n   */\n  logStatusCodeOk?: boolean;\n  /**\n   * Request mapper function, defines what output is generated for the given message.\n   * The default implementation is `(msg) => msg.toObject()`.\n   * According to your preferences you might choose e.g. `(msg) => msg.toProtobufJSON()` instead.\n   */\n  requestMapper?: (msg: GrpcMessage) => any;\n  /**\n   * Response mapper function, defines what output is generated for the given message.\n   * The default implementation is `(msg) => msg.toObject()`.\n   * According to your preferences you might choose e.g. `(msg) => msg.toProtobufJSON()` instead.\n   */\n  responseMapper?: (msg: GrpcMessage) => any;\n}\n\n/**\n * Interceptor that implements logging of every request to the browser console\n *\n * Can be enabled / disabled by GRPC_LOGGER_ENABLED injection token\n */\nexport class GrpcLoggerInterceptor implements GrpcInterceptor {\n  private dataStyle = 'color: #5c7ced;';\n  private errorStyle = 'color: red;';\n  private statusOkStyle = 'color: #0ffcf5;';\n\n  private settings: GrpcLoggerSettings;\n\n  constructor(settings: GrpcLoggerSettings = {}) {\n    this.settings = {\n      enabled: settings.enabled ?? true,\n      logClientSettings: settings.logClientSettings ?? true,\n      logMetadata: settings.logMetadata ?? true,\n      logStatusCodeOk: settings.logStatusCodeOk ?? false,\n      requestMapper:\n        settings.requestMapper ?? ((msg: GrpcMessage) => msg.toObject()),\n      responseMapper:\n        settings.responseMapper ?? ((msg: GrpcMessage) => msg.toObject()),\n    };\n  }\n\n  intercept<Q extends GrpcMessage, S extends GrpcMessage>(\n    request: GrpcRequest<Q, S>,\n    next: GrpcHandler,\n  ): Observable<GrpcEvent<S>> {\n    if (this.settings.enabled) {\n      const start = Date.now();\n\n      return next.handle(request).pipe(\n        tap((event) => {\n          const style =\n            event instanceof GrpcDataEvent\n              ? this.dataStyle\n              : event.statusCode !== 0\n              ? this.errorStyle\n              : this.statusOkStyle;\n          const openGroup = () =>\n            console.groupCollapsed(\n              `%c${Date.now() - start}ms -> ${request.path}`,\n              style,\n            );\n          const printSettings = () => {\n            if (this.settings.logClientSettings) {\n              console.log('%csc', style, request.client.getSettings());\n            }\n          };\n          const printMetadata = () => {\n            if (this.settings.logMetadata) {\n              console.log('%c**', style, request.requestMetadata.toObject());\n            }\n          };\n          const printRequest = () => {\n            if (this.settings?.requestMapper) {\n              console.log(\n                '%c>>',\n                style,\n                this.settings.requestMapper(request.requestData),\n              );\n            }\n          };\n          const closeGroup = () => console.groupEnd();\n\n          if (event instanceof GrpcDataEvent) {\n            openGroup();\n            printSettings();\n            printRequest();\n            printMetadata();\n            if (this.settings.responseMapper) {\n              console.log(\n                '%c<<',\n                style,\n                this.settings.responseMapper(event.data),\n              );\n            }\n            closeGroup();\n          } else if (event.statusCode !== 0) {\n            openGroup();\n            printSettings();\n            printRequest();\n            printMetadata();\n            console.log('%c<<', style, event);\n            closeGroup();\n          } else if (event.statusCode === 0 && this.settings.logStatusCodeOk) {\n            openGroup();\n            printSettings();\n            printRequest();\n            printMetadata();\n            console.log('%c<<', style, event);\n            closeGroup();\n          }\n        }),\n      );\n    }\n\n    return next.handle(request);\n  }\n}\n"]}