{"version":3,"file":"grpc-interceptor.js","sourceRoot":"","sources":["../src/grpc-interceptor.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  GrpcEvent,\n  GrpcMessage,\n  GrpcRequest,\n} from '@metabreak/grpc-worker-common';\nimport { Observable } from 'rxjs';\nimport { GrpcHandler } from './grpc-handler';\n\n/**\n * Interceptor interface which should be implemented for custom interceptors\n */\nexport interface GrpcInterceptor {\n  /**\n   * Interceptor entry point\n   *\n   * Example:\n   *\n   * ```\n   *  intercept<Q extends GrpcMessage, S extends GrpcMessage>(request: GrpcRequest<Q, S>, next: GrpcHandler): Observable<GrpcEvent<S>> {\n   *    // here do something before request, e.g. patch messages, metadata, etc\n   *\n   *    return next.handle(request).pipe(\n   *      // here handle all messages, status codes, metadata, errors, retries etc\n   *    );\n   *  }\n   * ```\n   *\n   * @param request intercepted request\n   * @param next current GrpcHandler to pass the messages through\n   */\n  intercept<Q extends GrpcMessage, S extends GrpcMessage>(\n    request: GrpcRequest<Q, S>,\n    next: GrpcHandler,\n  ): Observable<GrpcEvent<S>>;\n}\n"]}