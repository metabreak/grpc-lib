{"version":3,"file":"grpc-event.js","sourceRoot":"","sources":["../src/grpc-event.ts"],"names":[],"mappings":";;;AAMA,MAAa,aAAa;IACxB,YACS,IAAO;QAAP,SAAI,GAAJ,IAAI,CAAG;IACZ,CAAC;CACN;AAJD,sCAIC;AAKD,MAAa,eAAe;IAC1B,YACS,UAAkB,EAClB,aAAqB,EACrB,QAAsB;QAFtB,eAAU,GAAV,UAAU,CAAQ;QAClB,kBAAa,GAAb,aAAa,CAAQ;QACrB,aAAQ,GAAR,QAAQ,CAAc;IAC3B,CAAC;CACN;AAND,0CAMC","sourcesContent":["import { GrpcMessage } from './grpc-message';\nimport { GrpcMetadata } from './grpc-metadata';\n\n/**\n * Data event. This event is emitted when the new message arrives from the server\n */\nexport class GrpcDataEvent<T extends GrpcMessage> {\n  constructor(\n    public data: T,\n  ) { }\n}\n\n/**\n * Status event. This event is emitted when the new status and metadata arrives from the server\n */\nexport class GrpcStatusEvent {\n  constructor(\n    public statusCode: number,\n    public statusMessage: string,\n    public metadata: GrpcMetadata,\n  ) { }\n}\n\n/**\n * GrpcEvent can be either data or status event\n */\nexport type GrpcEvent<T extends GrpcMessage> = GrpcDataEvent<T> | GrpcStatusEvent;\n"]}