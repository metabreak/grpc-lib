{"version":3,"file":"grpc-client.js","sourceRoot":"","sources":["../src/grpc-client.ts"],"names":[],"mappings":";;;AAuEA,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,iDAAK,CAAA;IACL,+DAAY,CAAA;AACd,CAAC,EAHW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAGvB","sourcesContent":["import { Observable } from 'rxjs';\nimport { GrpcEvent } from './grpc-event';\nimport { GrpcMessage } from './grpc-message';\nimport { GrpcMessageClass } from './grpc-message-class';\nimport { GrpcMetadata } from './grpc-metadata';\n\n/**\n * This interface describes transport layer client factory, which is important in instantiating GrpcClient\n * because the GrpcClientFactory is bound to the dependency injection (use constructor to inject normal Angular services & config),\n * while GrpcClient has none\n */\nexport interface GrpcClientFactory<ST> {\n\n  /**\n   * Create a GrpcClient\n   * @param serviceId a service type in proto (passed in by generated service client), e.g.\n   * @param settings settings for underlying grpc client implementation\n   * @returns new GrpcClient\n   */\n  createClient(serviceId: string, settings: ST): GrpcClient<ST>;\n\n}\n\n/**\n * A transport layer client implementation interface\n * Instance of GrpcClient is created for every gRPC service client by corresponding GrpcClientFactory\n */\nexport interface GrpcClient<ST> {\n\n  /**\n   * Returns a copy of current client settings\n   */\n  getSettings(): ST;\n\n  /**\n   * Handle unary RPC\n   * @param path gRPC method path (rpc path)\n   * @param req request data\n   * @param metadata request metadata\n   * @param reqclss request message class\n   * @param resclss response message class\n   */\n  unary<Q extends GrpcMessage, S extends GrpcMessage>(\n    path: string,\n    req: Q,\n    metadata: GrpcMetadata,\n    reqclss: GrpcMessageClass<Q>,\n    resclss: GrpcMessageClass<S>,\n  ): Observable<GrpcEvent<S>>;\n\n  /**\n   * Handle server stream RPC\n   * @param path gRPC method path (rpc path)\n   * @param req request data\n   * @param metadata request metadata\n   * @param reqclss request message class\n   * @param resclss response message class\n   */\n  serverStream<Q extends GrpcMessage, S extends GrpcMessage>(\n    path: string,\n    req: Q,\n    metadata: GrpcMetadata,\n    reqclss: GrpcMessageClass<Q>,\n    resclss: GrpcMessageClass<S>,\n  ): Observable<GrpcEvent<S>>;\n\n}\n\n/**\n * Type of the RPC\n */\nexport enum GrpcCallType {\n  unary,\n  serverStream,\n}\n\n/**\n * This interface describes the internal gRPC request data structure\n */\nexport interface GrpcRequest<Q extends GrpcMessage, S extends GrpcMessage> {\n  path: string;\n  client: GrpcClient<any>;\n  type: GrpcCallType;\n  requestData: Q;\n  requestMetadata: GrpcMetadata;\n  requestClass: GrpcMessageClass<Q>;\n  responseClass: GrpcMessageClass<S>;\n}\n"]}