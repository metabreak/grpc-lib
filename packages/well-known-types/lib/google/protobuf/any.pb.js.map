{"version":3,"file":"any.pb.js","sourceRoot":"","sources":["../../../src/google/protobuf/any.pb.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n//\n// THIS IS A GENERATED FILE\n// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST\nimport {\n  GrpcMessage,\n  GrpcMessageClass,\n  GrpcMessagePool,\n  RecursivePartial,\n  ToProtobufJSONOptions,\n} from '@metabreak/grpc-worker-common';\nimport { BinaryReader, BinaryWriter, ByteSource } from 'google-protobuf';\n\n/**\n * Well known type, more at https://developers.google.com/protocol-buffers/docs/reference/google.protobuf\n */\nexport class Any implements GrpcMessage {\n  static id = 'google.protobuf.Any';\n\n  /**\n   * Deserialize binary data to message\n   * @param instance message instance\n   */\n  static deserializeBinary(bytes: ByteSource) {\n    const instance = new Any();\n    Any.deserializeBinaryFromReader(instance, new BinaryReader(bytes));\n    return instance;\n  }\n\n  private static prefix = 'type.googleapis.com/';\n\n  /**\n   * Create a new Any instance with a packed message\n   */\n  static pack(msg: GrpcMessage) {\n    const any = new Any();\n\n    any.pack(msg);\n\n    return any;\n  }\n\n  /**\n   * Check all the properties and set default protobuf values if necessary\n   * @param _instance message instance\n   */\n  static refineValues(_instance: Any) {\n    _instance.typeUrl = _instance.typeUrl || '';\n    _instance.value = _instance.value || new Uint8Array();\n  }\n\n  /**\n   * Deserializes / reads binary message into message instance using provided binary reader\n   * @param _instance message instance\n   * @param _reader binary reader instance\n   */\n  static deserializeBinaryFromReader(_instance: Any, _reader: BinaryReader) {\n    while (_reader.nextField()) {\n      if (_reader.isEndGroup()) break;\n\n      switch (_reader.getFieldNumber()) {\n        case 1:\n          _instance.typeUrl = _reader.readString();\n          break;\n        case 2:\n          _instance.value = _reader.readBytes();\n          break;\n        default:\n          _reader.skipField();\n      }\n    }\n\n    Any.refineValues(_instance);\n  }\n\n  /**\n   * Serializes a message to binary format using provided binary reader\n   * @param _instance message instance\n   * @param _writer binary writer instance\n   */\n  static serializeBinaryToWriter(_instance: Any, _writer: BinaryWriter) {\n    if (_instance.typeUrl) {\n      _writer.writeString(1, _instance.typeUrl);\n    }\n    if (_instance.value && _instance.value.length) {\n      _writer.writeBytes(2, _instance.value);\n    }\n  }\n\n  private _typeUrl?: string;\n  private _value?: Uint8Array;\n\n  /**\n   * Message constructor. Initializes the properties and applies default Protobuf values if necessary\n   * @param _value initial values object or instance of Any to deeply clone from\n   */\n  constructor(_value?: RecursivePartial<Any.AsObject>) {\n    _value = _value || {};\n    this.typeUrl = _value.typeUrl;\n    this.value = _value.value;\n    Any.refineValues(this);\n  }\n  get typeUrl(): string | undefined {\n    return this._typeUrl;\n  }\n  set typeUrl(value: string | undefined) {\n    this._typeUrl = value;\n  }\n  get value(): Uint8Array | undefined {\n    return this._value;\n  }\n  set value(value: Uint8Array | undefined) {\n    this._value = value;\n  }\n\n  /**\n   * Serialize message to binary data\n   * @param instance message instance\n   */\n  serializeBinary() {\n    const writer = new BinaryWriter();\n    Any.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n  }\n\n  /**\n   * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)\n   */\n  toObject(): Any.AsObject {\n    return {\n      typeUrl: this.typeUrl,\n      value: this.value ? this.value.subarray(0) : new Uint8Array(),\n    };\n  }\n\n  /**\n   * Convenience method to support JSON.stringify(message), replicates the structure of toObject()\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json\n   * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.\n   * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required\n   */\n  toProtobufJSON(\n    // @ts-ignore\n    options?: ToProtobufJSONOptions\n  ): Any.AsProtobufJSON {\n    if (!options?.messagePool) {\n      throw new Error(`Message pool is required to cast Any to JSON`);\n    }\n\n    const msg = this.unpack(options.messagePool);\n\n    if (!msg) {\n      return { '@type': this.typeUrl! };\n    }\n\n    const json = msg.toProtobufJSON(options);\n\n    if (typeof json !== 'object') {\n      return { '@type': this.typeUrl!, value: json };\n    }\n\n    return { ...json, '@type': this.typeUrl! };\n  }\n\n  /**\n   * Get the packed message id based on typeUrl.\n   * If no typeUrl is provided null is returned.\n   */\n  getPackedMessageId() {\n    if (!this.typeUrl) {\n      return null;\n    }\n\n    if (!this.typeUrl.startsWith(Any.prefix)) {\n      throw new Error(`Type URL does not start with ${Any.prefix}`);\n    }\n\n    return this.typeUrl.substr(Any.prefix.length);\n  }\n\n  /**\n   * Get the type of the packed message.\n   * Requires predefined GrpcMessagePool with expected message types within.\n   * If no type is found within the pool the error is thrown, unless throwWhenNotInThePool is set to false; in this case null will be returned.\n   */\n  getPackedMessageType(\n    messagePool: GrpcMessagePool,\n    throwWhenNotInThePool = true\n  ) {\n    const id = this.getPackedMessageId();\n\n    if (!id) {\n      return null;\n    }\n\n    const msgClass = messagePool.get(id);\n\n    if (!msgClass) {\n      if (throwWhenNotInThePool) {\n        throw new Error(\n          `Message with identifier '${this.typeUrl}' is not present in message pool`\n        );\n      } else {\n        return null;\n      }\n    }\n\n    return msgClass;\n  }\n\n  /**\n   * Unpack the current value into a message.\n   * Requires predefined GrpcMessagePool with expected message types within.\n   * If no type is found within the pool the error is thrown.\n   */\n  unpack<M extends GrpcMessage>(messagePool: GrpcMessagePool): M {\n    const messageClass = this.getPackedMessageType(messagePool);\n\n    if (!messageClass) {\n      throw new Error(`Message type cannot be resolved`);\n    }\n\n    if (!this.value) {\n      throw new Error(`Cannot unpack value that is unset`);\n    }\n\n    return messageClass.deserializeBinary(this.value) as M;\n  }\n\n  /**\n   * Pack the given message into current Any instance\n   */\n  pack(msg: GrpcMessage) {\n    const { id } = msg.constructor as GrpcMessageClass<any>;\n\n    if (!id) {\n      throw new Error(`Message is invalid or does not have an id`);\n    }\n\n    this.typeUrl = `${Any.prefix}${id}`;\n    this.value = msg.serializeBinary();\n  }\n}\nexport module Any {\n  /**\n   * Standard JavaScript object representation for Any\n   */\n  export interface AsObject {\n    typeUrl?: string;\n    value?: Uint8Array;\n  }\n\n  /**\n   * Protobuf JSON representation for Any\n   */\n  export type AsProtobufJSON = {\n    '@type': string;\n    value?: string;\n    [prop: string]: any;\n  };\n}\n"]}