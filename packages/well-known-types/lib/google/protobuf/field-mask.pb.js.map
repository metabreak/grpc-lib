{"version":3,"file":"field-mask.pb.js","sourceRoot":"","sources":["../../../src/google/protobuf/field-mask.pb.ts"],"names":[],"mappings":";;;AAYA,qDAAyE;AAKzE,MAAa,SAAS;IACpB,MAAM,CAAC,EAAE,GAAG,2BAA2B,CAAC;IAMxC,MAAM,CAAC,iBAAiB,CAAC,KAAiB;QACxC,MAAM,QAAQ,GAAG,IAAI,SAAS,EAAE,CAAC;QACjC,SAAS,CAAC,2BAA2B,CAAC,QAAQ,EAAE,IAAI,8BAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACzE,OAAO,QAAQ,CAAC;IAClB,CAAC;IAMD,MAAM,CAAC,YAAY,CAAC,SAAoB;QACtC,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,EAAE,CAAC;IAC1C,CAAC;IAOD,MAAM,CAAC,2BAA2B,CAChC,SAAoB,EACpB,OAAqB;QAErB,OAAO,OAAO,CAAC,SAAS,EAAE,EAAE;YAC1B,IAAI,OAAO,CAAC,UAAU,EAAE;gBAAE,MAAM;YAEhC,QAAQ,OAAO,CAAC,cAAc,EAAE,EAAE;gBAChC,KAAK,CAAC;oBACJ,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;oBACrE,MAAM;gBACR;oBACE,OAAO,CAAC,SAAS,EAAE,CAAC;aACvB;SACF;QAED,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAOD,MAAM,CAAC,uBAAuB,CAAC,SAAoB,EAAE,OAAqB;QACxE,IAAI,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE;YAC7C,OAAO,CAAC,mBAAmB,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;SACjD;IACH,CAAC;IAEO,MAAM,CAAY;IAM1B,YAAY,MAA6C;QACvD,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QAC1C,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IACD,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACD,IAAI,KAAK,CAAC,KAA2B;QACnC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAMD,eAAe;QACb,MAAM,MAAM,GAAG,IAAI,8BAAY,EAAE,CAAC;QAClC,SAAS,CAAC,uBAAuB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAChD,OAAO,MAAM,CAAC,eAAe,EAAE,CAAC;IAClC,CAAC;IAKD,QAAQ;QACN,OAAO;YACL,KAAK,EAAE,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE;SAClC,CAAC;IACJ,CAAC;IAKD,MAAM;QACJ,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAOD,cAAc,CAEZ,OAA+B;QAE/B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;;AA9GH,8BA+GC","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n//\n// THIS IS A GENERATED FILE\n// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST\n//\n\nimport {\n  GrpcMessage,\n  RecursivePartial,\n  ToProtobufJSONOptions,\n} from '@metabreak/grpc-common';\nimport { BinaryReader, BinaryWriter, ByteSource } from 'google-protobuf';\n\n/**\n * Well known type, more at https://developers.google.com/protocol-buffers/docs/reference/google.protobuf\n */\nexport class FieldMask implements GrpcMessage {\n  static id = 'google.protobuf.FieldMask';\n\n  /**\n   * Deserialize binary data to message\n   * @param instance message instance\n   */\n  static deserializeBinary(bytes: ByteSource) {\n    const instance = new FieldMask();\n    FieldMask.deserializeBinaryFromReader(instance, new BinaryReader(bytes));\n    return instance;\n  }\n\n  /**\n   * Check all the properties and set default protobuf values if necessary\n   * @param _instance message instance\n   */\n  static refineValues(_instance: FieldMask) {\n    _instance.paths = _instance.paths || [];\n  }\n\n  /**\n   * Deserializes / reads binary message into message instance using provided binary reader\n   * @param _instance message instance\n   * @param _reader binary reader instance\n   */\n  static deserializeBinaryFromReader(\n    _instance: FieldMask,\n    _reader: BinaryReader,\n  ) {\n    while (_reader.nextField()) {\n      if (_reader.isEndGroup()) break;\n\n      switch (_reader.getFieldNumber()) {\n        case 1:\n          (_instance.paths = _instance.paths || []).push(_reader.readString());\n          break;\n        default:\n          _reader.skipField();\n      }\n    }\n\n    FieldMask.refineValues(_instance);\n  }\n\n  /**\n   * Serializes a message to binary format using provided binary reader\n   * @param _instance message instance\n   * @param _writer binary writer instance\n   */\n  static serializeBinaryToWriter(_instance: FieldMask, _writer: BinaryWriter) {\n    if (_instance.paths && _instance.paths.length) {\n      _writer.writeRepeatedString(1, _instance.paths);\n    }\n  }\n\n  private _paths?: string[];\n\n  /**\n   * Message constructor. Initializes the properties and applies default Protobuf values if necessary\n   * @param _value initial values object or instance of FieldMask to deeply clone from\n   */\n  constructor(_value?: RecursivePartial<FieldMask.AsObject>) {\n    _value = _value || {};\n    this.paths = (_value.paths || []).slice();\n    FieldMask.refineValues(this);\n  }\n  get paths(): string[] | undefined {\n    return this._paths;\n  }\n  set paths(value: string[] | undefined) {\n    this._paths = value;\n  }\n\n  /**\n   * Serialize message to binary data\n   * @param instance message instance\n   */\n  serializeBinary() {\n    const writer = new BinaryWriter();\n    FieldMask.serializeBinaryToWriter(this, writer);\n    return writer.getResultBuffer();\n  }\n\n  /**\n   * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)\n   */\n  toObject(): FieldMask.AsObject {\n    return {\n      paths: (this.paths || []).slice(),\n    };\n  }\n\n  /**\n   * Convenience method to support JSON.stringify(message), replicates the structure of toObject()\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json\n   * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.\n   * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required\n   */\n  toProtobufJSON(\n    // @ts-ignore\n    options?: ToProtobufJSONOptions,\n  ): FieldMask.AsProtobufJSON {\n    return this.paths.join(',');\n  }\n}\nexport module FieldMask {\n  /**\n   * Standard JavaScript object representation for FieldMask\n   */\n  export interface AsObject {\n    paths?: string[];\n  }\n\n  /**\n   * Protobuf JSON representation for FieldMask\n   */\n  export type AsProtobufJSON = string;\n}\n"]}