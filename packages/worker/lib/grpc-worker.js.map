{"version":3,"file":"grpc-worker.js","sourceRoot":"","sources":["../src/grpc-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import { GrpcCallType, GrpcMessage } from '@metabreak/grpc-common';\nimport { Error, GrpcWebClientBase, MethodDescriptor, Status } from 'grpc-web';\nimport { GrpcWorkerApi } from './api';\nimport { GrpcWorkerClientSettings } from './client-settings';\nimport { GrpcWorkerServiceClientDef } from './service-client-def';\n\n/**\n * A worker-side service of worker client implementation based on grpc-web\n *\n * Example:\n *\n * ```\n * /// <reference lib=\"webworker\" />\n *\n * import { GrpcWorker } from '@ngx-grpc/worker';\n * import { GrpcWorkerEchoServiceClientDef } from '../proto/echo.pbwsc';\n *\n * const worker = new GrpcWorker();\n *\n * worker.register(\n *   // register here all the service clients definitions\n *   GrpcWorkerEchoServiceClientDef,\n * );\n *\n * worker.start();\n * ```\n */\nexport class GrpcWorker {\n  private definitions = new Map<string, GrpcWorkerServiceClientDef>();\n\n  private clients = new Map<\n    string,\n    {\n      settings: GrpcWorkerClientSettings;\n      client: GrpcWebClientBase;\n    }\n  >();\n\n  private requestCancelHandlers = new Map<number, () => void>();\n\n  /**\n   * Register one or more service clients.\n   * Add here only the services you use, otherwise the worker size can explode.\n   * @param defs generated service client definitions to register\n   */\n  register(...defs: GrpcWorkerServiceClientDef[]) {\n    defs.forEach((def) => this.definitions.set(def.serviceId, def));\n  }\n\n  /**\n   * Start the service\n   */\n  start() {\n    addEventListener(\n      'message',\n      ({\n        data,\n      }: GrpcWorkerApi.WorkerMessageEvent<GrpcWorkerApi.GrpcWorkerMessage>) => {\n        switch (data.type) {\n          case GrpcWorkerApi.GrpcWorkerMessageType.serviceClientConfig:\n            this.configureServiceClient(\n              data as GrpcWorkerApi.GrpcWorkerMessageServiceClientConfig,\n            );\n            break;\n          case GrpcWorkerApi.GrpcWorkerMessageType.rpcRequest:\n            this.handleRpc(\n              data as GrpcWorkerApi.GrpcWorkerMessageRPCRequest<any>,\n            );\n            break;\n          case GrpcWorkerApi.GrpcWorkerMessageType.rpcCancel:\n            this.cancelRpc(data as GrpcWorkerApi.GrpcWorkerMessageRPCCancel);\n            break;\n          default:\n            throw new Error(`Unknown incoming message type ${data.type}`);\n        }\n      },\n    );\n  }\n\n  private configureServiceClient(\n    message: GrpcWorkerApi.GrpcWorkerMessageServiceClientConfig,\n  ) {\n    const def = this.definitions.get(message.serviceId);\n\n    if (!def) {\n      throw new Error(\n        `Service client ${message.serviceId} is not registered in Worker`,\n      );\n    }\n\n    this.clients.set(message.serviceId, {\n      settings: message.settings,\n      client: new GrpcWebClientBase(message.settings),\n    });\n  }\n\n  private handleRpc(message: GrpcWorkerApi.GrpcWorkerMessageRPCRequest<any>) {\n    const def = this.definitions.get(message.serviceId);\n\n    if (!def) {\n      throw new Error(\n        `Service client ${message.serviceId} is not registered in Worker`,\n      );\n    }\n\n    const service = this.clients.get(message.serviceId);\n\n    if (!service) {\n      throw new Error(\n        `Service client ${message.serviceId} is not configured in Worker`,\n      );\n    }\n\n    const respond = (msg: any) =>\n      (postMessage as any)({\n        type: GrpcWorkerApi.GrpcWorkerMessageType.rpcResponse,\n        id: message.id,\n        ...msg,\n      });\n\n    const { type, reqclss, resclss } = def.methods[message.path];\n    const request = new reqclss(message.request);\n    const url = service.settings.host + message.path;\n    const metadata = message.metadata || {};\n    const descriptor = new MethodDescriptor<any, any>(\n      message.path,\n      type === GrpcCallType.unary ? 'unary' : 'server_streaming',\n      reqclss,\n      resclss,\n      (req: GrpcMessage) => req.serializeBinary(),\n      resclss.deserializeBinary,\n    );\n\n    if (type === GrpcCallType.unary) {\n      const stream = service.client.rpcCall(\n        url,\n        request,\n        metadata,\n        descriptor,\n        (error, response: GrpcMessage) => {\n          if (error) {\n            this.requestCancelHandlers.delete(message.id);\n            respond({\n              responseType:\n                GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.error,\n              error,\n            });\n          } else {\n            respond({\n              responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.data,\n              response: response.toObject(),\n            });\n          }\n        },\n      );\n\n      // take only status 0 because unary error already includes non-zero statuses\n      stream.on('status', (status: Status) =>\n        status.code === 0\n          ? respond({\n              responseType:\n                GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.status,\n              status,\n            })\n          : null,\n      );\n\n      stream.on('end', () => {\n        this.requestCancelHandlers.delete(message.id);\n        respond({\n          responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.end,\n        });\n      });\n\n      this.requestCancelHandlers.set(message.id, () => stream.cancel());\n    } else {\n      const stream = service.client.serverStreaming(\n        url,\n        request,\n        metadata,\n        descriptor,\n      );\n\n      stream.on('error', (error: Error) => {\n        this.requestCancelHandlers.delete(message.id);\n        respond({\n          responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.error,\n          error,\n        });\n      });\n\n      stream.on('status', (status: Status) =>\n        respond({\n          responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.status,\n          status,\n        }),\n      );\n\n      stream.on('data', (response: GrpcMessage) =>\n        respond({\n          responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.data,\n          response: response.toObject(),\n        }),\n      );\n\n      stream.on('end', () => {\n        this.requestCancelHandlers.delete(message.id);\n        respond({\n          responseType: GrpcWorkerApi.GrpcWorkerMessageRPCResponseType.end,\n        });\n      });\n\n      this.requestCancelHandlers.set(message.id, () => stream.cancel());\n    }\n  }\n\n  private cancelRpc(message: GrpcWorkerApi.GrpcWorkerMessageRPCCancel) {\n    const cancel = this.requestCancelHandlers.get(message.id);\n\n    if (cancel) {\n      cancel();\n      this.requestCancelHandlers.delete(message.id);\n    }\n  }\n}\n"]}